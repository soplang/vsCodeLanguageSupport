// Complex Test: List Filter (shaandhee)
// Testing the shaandhee() method with different data types and conditions

qor("Testing list filter (shaandhee) with complex conditions:")

// Test 1: Filter numbers based on a calculation
hawl is_divisible_by_three(n) {
  celi n % 3 == 0
}

teed numbers = [3, 5, 6, 9, 10, 12, 15, 18]
qor("Original numbers: " + numbers)
door divisible_by_three = numbers.shaandhee(is_divisible_by_three)
qor("Numbers divisible by 3: " + divisible_by_three)

// Test 2: Filter strings by their characteristics
// In Soplang, we don't have a string length method, so we use a different approach
hawl has_letter_e(s) {
  // This is a simple approximation since we don't have string search in Soplang
  celi s == "hello" || s == "welcome" || s == "greetings"
}

teed words = ["hello", "hi", "welcome", "bye", "greetings", "ok"]
qor("Original words: " + words)
door words_with_e = words.shaandhee(has_letter_e)
qor("Words containing 'e': " + words_with_e)

// Test 3: Filter by a more complex condition with multiple operators
hawl is_special_number(n) {
  celi n > 10 && n % 2 == 1
}

teed more_numbers = [5, 8, 11, 14, 15, 18, 21]
qor("More numbers: " + more_numbers)
door special_numbers = more_numbers.shaandhee(is_special_number)
qor("Numbers greater than 10 and odd: " + special_numbers)

qor("All tests completed!")
