// Test: Object Entries (lamaane)
// This test demonstrates the walax.lamaane() method which returns key-value pairs

qor("Testing walax.lamaane() (object entries):")

// Create a test object with various properties
walax qof = {
  magac: "Ayaan",
  da: 21,
  shaqo: "macallin",
  waa_arday: been
}

// Display the original object
qor("\nOriginal object:")
qor("  qof = " + qof)

// Get entries (key-value pairs) using lamaane()
teed pairs = qof.lamaane()
qor("\nEntries using lamaane():")
qor("  " + pairs)

// Iterate through the entries and display them
qor("\nIterating through entries:")
kuceli (i 0 ilaa pairs.dherer() - 1) {
  qor("  " + pairs[i][0] + ": " + pairs[i][1])
}

// Test with empty object
walax empty = {}
qor("\nTesting empty object:")
qor("  Empty object entries: " + empty.lamaane())
qor("  Entries count: " + empty.lamaane().dherer())

// Test with object containing nested values
walax complex = {
  name: "Complex",
  data: [1, 2, 3],
  nested: {a: 1, b: 2},
  active: run
}
qor("\nTesting object with nested values:")
teed complex_entries = complex.lamaane()
qor("  Entries: " + complex_entries)

// Demonstrate transforming entries
qor("\nTransforming entries to formatted strings:")
teed formatted = []
kuceli (i 0 ilaa complex_entries.dherer() - 1) {
  door key = complex_entries[i][0]
  door value = complex_entries[i][1]
  door type = nooc(value)
  formatted.kudar(key + " (" + type + "): " + qoraal(value))
}
qor("  Formatted entries:")
kuceli (i 0 ilaa formatted.dherer() - 1) {
  qor("  - " + formatted[i])
}

// Demonstrate updating values through entries
qor("\nUpdating values through entries:")
teed qof_entries = qof.lamaane()
kuceli (i 0 ilaa qof_entries.dherer() - 1) {
  // Find the age entry and update the object
  haddii (qof_entries[i][0] == "da") {
    door new_age = qof_entries[i][1] + 1
    qof.da = new_age
    qor("  Updated age: " + new_age)
  }
}
qor("  Updated object: " + qof)

qor("\nTest completed: walax.lamaane() returns key-value pairs from an object")
