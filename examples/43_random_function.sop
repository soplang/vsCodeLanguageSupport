// Test: Random Function (xul)
// This test demonstrates the xul() function for generating random values

qor("Testing random function (xul):")

// Case 1: No arguments - random float between 0.0 and 1.0
qor("\nGenerate random float between 0.0 and 1.0:")
door randomFloat1 = xul()
door randomFloat2 = xul()
door randomFloat3 = xul()
qor("  Random float 1: " + randomFloat1)
qor("  Random float 2: " + randomFloat2)
qor("  Random float 3: " + randomFloat3)
qor("  Note: Values will be different on each run")

// Case 2: Two number arguments - random number between a and b (inclusive)
qor("\nGenerate random integers between ranges:")
// Dice roll (1-6)
door diceRoll1 = xul(1, 6)
door diceRoll2 = xul(1, 6)
door diceRoll3 = xul(1, 6)
qor("  Dice roll 1 (1-6): " + diceRoll1)
qor("  Dice roll 2 (1-6): " + diceRoll2)
qor("  Dice roll 3 (1-6): " + diceRoll3)

// Random number between 10 and 20
door randomNum = xul(10, 20)
qor("  Random number (10-20): " + randomNum)

// Random decimal between ranges
door randomDecimal = xul(0.5, 9.5)
qor("  Random decimal (0.5-9.5): " + randomDecimal)

// Case 3: One list argument - random item from list
qor("\nSelect random items from lists:")
// Names
teed names = ["Ayaan", "Cali", "Zahra", "Ahmed", "Fadumo"]
door randomName1 = xul(names)
door randomName2 = xul(names)
door randomName3 = xul(names)
qor("  Random name 1: " + randomName1)
qor("  Random name 2: " + randomName2)
qor("  Random name 3: " + randomName3)

// Mixed types
teed mixedList = [42, "Soplang", been, [1, 2, 3], {name: "test"}]
door randomItem = xul(mixedList)
qor("  Random item from mixed list: " + randomItem)

// Practical applications
qor("\nPractical applications:")

// 1. Random color generator
teed colors = ["red", "green", "blue", "yellow", "purple", "orange"]
door randomColor = xul(colors)
qor("  Random color: " + randomColor)

// 2. Random yes/no decision
door randomValue = xul()
door decision = ""
haddii (randomValue > 0.5) {
    decision = "Haa"
} ugudambeyn {
    decision = "Maya"
}
qor("  Random decision: " + decision)

// 3. Password generator helper
hawl randomChar() {
    teed chars = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
                 "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
                 "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
                 "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
                 "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
                 "!", "@", "#", "$", "%", "&", "*"]
    celi xul(chars)
}

qoraal password = ""
kuceli (i 0 ilaa 7) {
    password = password + randomChar()
}
qor("  Random password: " + password)

// 4. Simple dice game
abn player1 = xul(1, 6)
abn player2 = xul(1, 6)
qor("  Dice game: Player 1 rolled " + player1 + ", Player 2 rolled " + player2)

haddii (player1 > player2) {
    qor("  Player 1 wins!")
} haddii_kale (player2 > player1) {
    qor("  Player 2 wins!")
} ugudambeyn {
    qor("  It's a tie!")
}

qor("\nTesting error cases:")
qor("  Note: The following lines would cause errors if uncommented:")
qor("  // xul(1, 2, 3)          // Too many arguments")
qor("  // xul({})               // Not a list")
qor("  // xul(6, 1)             // First value greater than second")
qor("  // xul([])               // Empty list")


qor("\nRandom function tests completed!")
